@inherits LayoutComponentBase

<CascadingValue Value="this">
    <div class="page">
        <main>
            <div class="top-row">
                <h3>Pokémon TCG Pocket Calculator</h3>

                <div class="grid-controls-wrapper">
                    <div class="grid-controls">
                        <button class="resize-button" @onclick='() => OnResizeGrid("small")'>Small</button>
                        <button class="resize-button" @onclick='() => OnResizeGrid("medium")'>Medium</button>
                        <button class="resize-button" @onclick='() => OnResizeGrid("large")'>Large</button>
                    </div>
                </div>

                <div class="button-group">
                    <button class="calculate-button" @onclick="SelectAllClicked">Select All</button>
                    <button class="calculate-button" @onclick="DeselectAllClicked">Deselect All</button>
                    <button class="calculate-button" @onclick="OnCalculateClicked">Calculate</button>
                </div>
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
</CascadingValue>

@code {
    public event Action SelectAllTriggered;
    public event Action DeselectAllTriggered;
    public event Action CalculatePacksTriggered;

    private void SelectAllClicked()
    {
        SelectAllTriggered?.Invoke();
    }
    private void DeselectAllClicked()
    {
        DeselectAllTriggered?.Invoke();
    }

    @inject IJSRuntime JSRuntime

    private async void OnCalculateClicked()
    {
        CalculatePacksTriggered?.Invoke();
        await JSRuntime.InvokeVoidAsync("scrollToTop"); // Scroll to the top of the screen
    }

    [CascadingParameter] private MainLayout MainLayouts { get; set; }
    public event Action<string> GridSizeChanged;

    private void OnResizeGrid(string size)
    {
        GridSizeChanged?.Invoke(size); // Notify the grid size change
    }

}
